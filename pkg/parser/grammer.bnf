template          → valueTemplate | mixedTemplate ;
mixedTemplate     → ( valueTemplate | TEXT )* ;
valueTemplate     → TEMPLATE_START expression TEMPLATE_END ;
expression        → ternary ;
ternary           → equality ( QMARK expression COLON expression )? ;
equality          → comparison ( ( BANG_EQUAL | EQUAL_EQUAL ) comparison )* ;
comparison        → term ( ( GREATER | GREATER_EQUAL | LESS | LESS_EQUAL ) term )* ;
term              → factor ( ( MINUS | PLUS ) factor )* ;
factor            → unary ( ( SLASH | STAR ) unary )* ;
unary             → ( BANG | MINUS ) unary | primary ;
primary           → NUMBER | STRING | TRUE | FALSE | NIL | LPAREN expression RPAREN | IDENTIFIER | functionCall ;
functionCall      → IDENTIFIER LPAREN arguments? RPAREN ;
arguments         → expression ( COMMA expression )* ;
IDENTIFIER        → LETTER ( LETTER | DIGIT )* ;
NUMBER            → DIGIT+ ( DOT DIGIT+ )? ;
STRING            → ((DQUOTE characters? DQUOTE) | (SQUOTE characters? SQUOTE)) ;
characters        → ( escape | char )* ;
escape            → "\\" char ;
LETTER            → [a-zA-Z] ;
DIGIT             → [0-9] ;
TEMPLATE_START    → "{{" ;
TEMPLATE_END      → "}}" ;
QMARK             → "?" ;
COLON             → ":" ;
COMMA             → "," ;
DOT               → "." ;
EQUAL             → "=" ;
BANG              → "!" ;
MINUS             → "-" ;
PLUS              → "+" ;
DQUOTE            → "\"" ;
SQUOTE            → "\'" ;
SLASH             → "/" ;
STAR              → "*" ;
LPAREN            → "(" ;
RPAREN            → ")" ;
EQUAL_EQUAL       → "==" ;
BANG_EQUAL        → "!=" ;
GREATER           → ">" ;
GREATER_EQUAL     → ">=" ;
LESS              → "<" ;
LESS_EQUAL        → "<=" ;
TRUE              → "true" ;
FALSE             → "false" ;
NIL               → "nil" ;
TEXT              → [^\{\}]+ ;
char              → [^\"] ;


